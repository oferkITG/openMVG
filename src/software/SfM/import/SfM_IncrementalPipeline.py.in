#!/usr/bin/python
#! -*- encoding: utf-8 -*-

# This file is part of OpenMVG (Open Multiple View Geometry) C++ library.

# Python implementation of the bash script written by Romuald Perrot
# Created by @vins31
# Modified by Yannnnnnnnnnnn
#
# this script is for easy use of OpenMVG
#
# usage : python openmvg.py image_dir gt_dir output_dir
#
# image_dir is the input directory where images are located
# gt_dir is the input directory where ground truth are located
# output_dir is where the project must be saved
#
# if output_dir is not present script will create it
#

# Indicate the openMVG binary directory
OPENMVG_SFM_BIN = "@OPENMVG_SOFTWARE_SFM_BUILD_DIR@"

# Indicate the openMVG camera sensor width directory
CAMERA_SENSOR_WIDTH_DIRECTORY = "@OPENMVG_SOFTWARE_SFM_SRC_DIR@" + "/../../openMVG/exif/sensor_width_database"

import os
import subprocess
import sys

if len(sys.argv) < 5:
    print ("Usage %s image_dir gt_dir gt_type output_dir" % sys.argv[0])
    print ("gt_type: %s 1:Strecha's Dataset 2:MiddleBury's Dataset 3:DTU MVS Dataset 4:ETH 3D Dataset 5:Kitti Odometry Dataset 6:BlendedMVS Dataset 7:Multiface Dataset" % sys.argv[0])
    sys.exit(1)

input_dir = sys.argv[1]
gt_dir    = sys.argv[2]
gt_type   = sys.argv[3]
output_dir = sys.argv[4]
matches_dir = os.path.join(output_dir, "matches")
reconstruction_dir = os.path.join(output_dir, "reconstruction_structure")
camera_file_params = os.path.join(CAMERA_SENSOR_WIDTH_DIRECTORY, "sensor_width_camera_database.txt")

print ("Using input dir  : ", input_dir)
print ("      gt_dir     : ", gt_dir)
print ("      gt_type    : ", gt_type)
print ("      output_dir : ", output_dir)

# Create the ouput/matches folder if not present
if not os.path.exists(output_dir):
  os.mkdir(output_dir)
if not os.path.exists(matches_dir):
  os.mkdir(matches_dir)

# Create the reconstruction if not present
if not os.path.exists(reconstruction_dir):
    os.mkdir(reconstruction_dir)

print ("1. Load GT with Intrinsic analysis")
pIntrisics = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_SfMInit_ImageListingFromKnownPoses"),  "-i", input_dir, "-g", gt_dir, "-t", gt_type, "-o", output_dir] )
pIntrisics.wait()

print ("2. Compute features")
pFeatures = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeFeatures"),  "-i", output_dir+"/sfm_data.json", "-o", matches_dir, "-m", "SIFT", "-n", "8"] )
pFeatures.wait()

print ("3. Compute matching pairs")
pPairs = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_PairGenerator"), "-i", output_dir+"/sfm_data.json", "-o" , matches_dir + "/pairs.bin", "-m", "CONTIGUOUS", "-c", "10" ] )
pPairs.wait()

# print ("3. Compute matching pairs")
# pPairs = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_FrustumFiltering"), "-i", output_dir+"/sfm_data.json", "-o" , matches_dir + "/pairs.bin" ] )
# pPairs.wait()

print ("4. Compute matches")
pMatches = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeMatches"),  "-i", output_dir+"/sfm_data.json", "-p", matches_dir+ "/pairs.bin", "-o", matches_dir + "/matches.putative.bin" ] )
pMatches.wait()

print ("5. Filter matches" )
pFiltering = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_GeometricFilter"), "-i", output_dir+"/sfm_data.json", "-m", matches_dir+"/matches.putative.bin" , "-g" , "f" , "-o" , matches_dir+"/matches.f.bin" ] )
pFiltering.wait()

# Create the reconstruction if not present
if not os.path.exists(reconstruction_dir):
    os.mkdir(reconstruction_dir)

print ("6. Do Sequential/Incremental reconstruction")
pRecons = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_SfM"), "--sfm_engine", "INCREMENTALV2", "-S", "EXISTING_POSE", "--input_file", output_dir+"/sfm_data.json", "--match_dir", matches_dir, "--output_dir", reconstruction_dir] )
pRecons.wait()

print ("7. geodesy_registration_to_gps_position")
pRecons = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_geodesy_registration_to_gps_position"), "-d", gt_dir, "-i", reconstruction_dir+"/sfm_data.bin", "-o", reconstruction_dir+"/sfm_data_adjusted.bin", "-M", "2"] )
pRecons.wait()

# print ("9. convert sfm_data_adjusted.bin to json")
# pConvert = subprocess.Popen([os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ConvertSfM_DataFormat"), "-i", reconstruction_dir+"/sfm_data_adjusted.bin", "-o", output_dir+"/sfm_data_adjusted.json"])
# pRecons.wait()

# print ("10. Do Sequential/Incremental reconstruction with GPS anchors")
# pRecons = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_SfM"), "--sfm_engine", "INCREMENTALV2", "-S", "EXISTING_POSE", "--input_file", output_dir+"/sfm_data_adjusted.json", "--match_dir", matches_dir, "--output_dir", reconstruction_dir, "-P"] )
# pRecons.wait()

print ("11. Colorize Structure GPS")
pRecons = subprocess.Popen( [os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ComputeSfM_DataColor"),  "-i", reconstruction_dir+"/sfm_data_adjusted.bin", "-o", os.path.join(reconstruction_dir,"colorized_gps_registered.ply")] )
pRecons.wait()

# print("12. Export Camera Frustum")
# pCamFrus = subprocess.Popen([os.path.join(OPENMVG_SFM_BIN, "openMVG_main_ExportCameraFrustums"), "-i", output_dir+"/sfm_data.json", "-o", os.path.join(reconstruction_dir,"cam_frustums.ply"),  "-c", "-n", "0.1", "-f", "0.5"])
# pCamFrus.wait()
